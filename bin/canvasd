#!/usr/bin/env julia
#
# Webapp
using Morsel
using Canvas

using Patchwork, Patchwork.HTML5
using WebSockets
using Morsel

include("setup.jl")

app = Morsel.app()

function renderfile(filename)
    if isfile(filename)
        try
            include(filename)
        catch err
            bt = backtrace()
            return Elem(:pre, sprint() do io
                showerror(io, err)
                Base.show_backtrace(io, bt)
            end)
        end
        try
            return main
        catch
            return p("main not defined")
        end
    else
        return p(string(
            filename, " could not be found."
        ))
    end
end

route(app, GET, "/") do req, res
    renderfile("index.jl")
end

route(app, GET, "/<file>") do req, res
    filename = abspath(req.params[:file])
    renderfile(filename)
end

wsock = WebSocketHandler() do req, client
    while true
        msg = read(client)
        write(client, msg)
    end
end

#function Canvas.setup_transport(sig::Input)
#    id = makeid(sig)
#    # add_channel
#    # 
#    comm = Comm(:CanvasSignal, data=[:signalId => id])
#    comm.on_msg = (msg) -> push!(sig, decodeJSON(sig, msg.content["data"]["value"]))
#    return id
#end


start(app, 8080, wsock=wsock)
