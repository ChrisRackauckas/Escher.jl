#!/usr/bin/env julia
#
# Webapp
using Morsel
using Canvas
using JSON

using Reactive
using Patchwork, Patchwork.HTML5
using WebSockets
using Morsel

app = Morsel.app()

function renderfile(filename)
    if isfile(filename)
        try
            include(filename)
        catch err
            bt = backtrace()
            return Elem(:pre, sprint() do io
                showerror(io, err)
                Base.show_backtrace(io, bt)
            end)
        end
        try
            return main
        catch
            return p("main not defined")
        end
    else
        return p(string(
            filename, " could not be found."
        ))
    end
end

function setup_socket(file)
    io = IOBuffer()
    Canvas.write_canvas_prelude(io)

    write(io, """<div id="root"></div>""")
    write(io, """<script>new Canvasd($(JSON.json(file)), "root");</script>""")
    takebuf_string(io)
end

route(app, GET, "/") do req, res
    setup_socket("index.jl")
end

route(app, GET, "/<file>") do req, res
    setup_socket(req.params[:file])
end

mount_cmd(node, id="root") =
   [ "command" => "mount",
    "id" => id,
    "data" => Patchwork.jsonfmt(node)] |> JSON.json

patch_cmd(diff, id="root") =
   [ "command" => "patch",
    "id" => id,
    "data" => Patchwork.jsonfmt(diff)] |> JSON.json

swap!(tilestream, next::Signal) =
    push!(tilestream, next)

swap!(tilestream, next) =
    push!(tilestream, Input(next))

const signals = Dict()
function Canvas.setup_transport(x::Input)
    Canvas.makeid(x)
end

const commands = Dict([
    ("signal-update", (msg) -> begin
        id = msg["data"]["signalId"]
        sig = Canvas.fromid(id)
        push!(sig, Canvas.decodeJSON(sig, msg["data"]["value"]))
    end),
])

wsroute(app, GET, "/socket/<file>") do req, sock
    file = abspath(req.params[:file])
    tilestream = Input{Signal}(Input{Tile}(empty))
    current = renderfile(file)
    println("Mounting a ", typeof(current))

    swap!(tilestream, current)

    rendered = render(current)
    try
        write(sock, mount_cmd(rendered))
    catch ex
        if isopen(sock)
            rethrow(ex)
        end
    end

    foldl(rendered, flatten(tilestream; typ=Any); output_type=Any) do prev, next
        rendered_next = render(next)
        try
            write(sock, patch_cmd(
                Patchwork.diff(prev, rendered_next)))
        catch ex
            if isopen(sock)
                rethrow(ex)
            end
        end
        rendered_next
    end

    @async while isopen(sock)
        data = read(sock)

        msg = JSON.parse(bytestring(data))
        if !haskey(commands, msg["command"])
            warn("Unknown command received ", msg["command"])
        else
            commands[msg["command"]](msg)
        end
    end

    while isopen(sock)
        fw = watch_file(file)
        wait(fw)
        close(fw)
        sleep(0.2) # But wai???

        next = renderfile(file)

        println("Replacing with a ", typeof(current))
        # Replace the current main signal
        swap!(tilestream, next)
    end

end

start(app, 6767)
