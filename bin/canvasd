#!/usr/bin/env julia
#
# Webapp
using Morsel
using Canvas
using JSON

using Reactive
using Patchwork, Patchwork.HTML5
using WebSockets
using Morsel

include("setup.jl")

app = Morsel.app()

function renderfile(filename)
    if isfile(filename)
        try
            include(filename)
        catch err
            bt = backtrace()
            return Elem(:pre, sprint() do io
                showerror(io, err)
                Base.show_backtrace(io, bt)
            end)
        end
        try
            return main
        catch
            return p("main not defined")
        end
    else
        return p(string(
            filename, " could not be found."
        ))
    end
end

function setup_transport(file)
    io = IOBuffer()
    write_canvas_prelude(io)

    write(io, """<div id="root"></div>""")
    write(io, """<script>new Canvasd($(JSON.json(file)), "root");</script>""")
    takebuf_string(io)
end

route(app, GET, "/") do req, res
    setup_transport("index.jl")
end

route(app, GET, "/<file>") do req, res
    setup_transport(req.params[:file])
end

mount_cmd(node, id="root") =
   [ "command" => "mount",
    "id" => id,
    "data" => Patchwork.jsonfmt(node)] |> JSON.json

patch_cmd(diff, id="root") =
   [ "command" => "patch",
    "id" => id,
    "data" => Patchwork.jsonfmt(diff)] |> JSON.json

swap!(tilestream, next::Signal) =
    push!(tilestream, next)

swap!(tilestream, next) =
    push!(tilestream, Input(next))

wsroute(app, GET, "/socket/<file>") do req, sock
    file = abspath(req.params[:file])
    current = renderfile(file) |> render

    tilestream = Input{Signal}(Input{Tile}(empty))
    swap!(tilestream, current)

    write(sock, mount_cmd(current))

    foldl(current, flatten(tilestream; typ=Any); output_type=Any) do prev, next
        rendered_next = render(next)
        write(sock, patch_cmd(
            Patchwork.diff(prev, rendered_next)))
        rendered_next
    end

    while isopen(sock)
        fw = watch_file(file)
        wait(fw)
        close(fw)
        sleep(0.2) # But wai???

        next = renderfile(file)

        # Replace the current main signal
        swap!(tilestream, next)
    end
end

start(app, 6767)
