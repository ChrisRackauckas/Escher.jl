#!/usr/bin/env julia
#
# Webapp
using Mux
using Lazy
using Canvas
using JSON

using Reactive
using Patchwork

function loadfile(filename)
    if isfile(filename)

        try
            include(filename)
            return try
                main
            catch
                w -> Elem(:pre, "$filename doesn't have a main function")
            end
        catch err
            bt = backtrace()
            return (win) -> Elem(:pre, sprint() do io
                showerror(io, err)
                Base.show_backtrace(io, bt)
            end)
        end
    else
        return (w) -> Elem(:p, string(
            filename, " could not be found."
        ))
    end
end

function setup_socket(file)
    io = IOBuffer()
    write(io, """<!doctype html>
    <html>
        <head>""")
    # Include the basics
    write(io, "<script>", Patchwork.js_runtime(), "</script>")
    write(io, """<link rel="import" href="$(Canvas.resolve_asset("basics"))">""")

    write(io, """</head> <body unresolved><div id="root" class="canvasRoot"></div>""")
    write(io, """<script>new Canvasd($(JSON.json(file)), "root");</script></body>""")
    takebuf_string(io)
end

mount_cmd(node, id="root") =
   [ "command" => "mount",
    "id" => id,
    "data" => Patchwork.jsonfmt(node)] |> JSON.json

import_cmd(asset) =
    [ "command" => "import",
      "data" => Canvas.resolve_asset(asset) ] 

patch_cmd(diff, id="root") =
   [ "command" => "patch",
    "id" => id,
    "data" => Patchwork.jsonfmt(diff)] |> JSON.json

swap!(tilestream, next::Signal) =
    push!(tilestream, next)

swap!(tilestream, next) =
    push!(tilestream, Input(next))

const signals = Dict()
function Canvas.setup_transport(x::Input)
    Canvas.makeid(x)
end

const commands = Dict([
    ("signal-update", (window, msg) -> begin
        id = msg["data"]["signalId"]
        sig = Canvas.fromid(id)
        push!(sig, Canvas.decodeJSON(sig, msg["data"]["value"]))
    end),
    ("window-size", (window, msg) -> begin
        dim = (msg["data"][1] * px, msg["data"][1] * px)
        push!(window.dimension, dim)
    end),
    ("window-route", (window, msg) -> begin
        push!(window.route, msg["data"])
    end)
])


function uisocket(req)
    file = abspath(req[:params][:file])

    if !isfile(file)
        return
    end

    sock = req[:socket]
    tilestream = Input{Signal}(Input{Tile}(empty))

    # TODO: Initialize window with session,
    # window dimensions and what not

    window = Window()

    lift(asset -> write(sock, JSON.json(import_cmd(asset))),
         window.assets)

    main = loadfile(file)

    current = main(window)

    swap!(tilestream, current)

    rendered = render(current)
    try
        write(sock, mount_cmd(rendered))
    catch ex
        if isopen(sock)
            rethrow(ex)
        end
    end

    foldl(rendered, flatten(tilestream; typ=Any); output_type=Any) do prev, next
        rendered_next = render(next)
        try
            write(sock, patch_cmd(
                Patchwork.diff(prev, rendered_next)))
        catch ex
            if isopen(sock)
                rethrow(ex)
            end
        end
        rendered_next
    end

    @async while isopen(sock)
        data = read(sock)

        msg = JSON.parse(bytestring(data))
        if !haskey(commands, msg["command"])
            warn("Unknown command received ", msg["command"])
        else
            commands[msg["command"]](window, msg)
        end
    end

    while isopen(sock)
        fw = watch_file(file)
        wait(fw)
        close(fw)
        sleep(0.05) # But wai???

        main = loadfile(file)
        next = main(window)

        # Replace the current main signal
        swap!(tilestream, next)
    end

end

# App
@app static = (
    Mux.defaults,
    route("assets", Mux.files(Pkg.dir("Canvas", "assets")), Mux.notfound()),
    route("/:file", req -> setup_socket(req[:params][:file])),
    route("/", req -> setup_socket("index.jl")),
    Mux.notfound(),
)

@app comm = (
    Mux.wdefaults,
    route("/socket/:file", uisocket),
    Mux.wclose,
    Mux.notfound(),
)

@sync serve(static, comm)
